{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","socket","setSocket","message","setMessage","user","setUser","chatChain","setChatChain","useEffect","on","msg","chain","push","length","shift","io","className","map","index","key","ip","action","style","width","placeholder","autoComplete","value","onChange","event","target","onClick","preventDefault","emit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAiEeA,MA5Df,WAAgB,IAAD,EACcC,mBAAS,MADvB,mBACPC,EADO,KACCC,EADD,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGUJ,mBAAS,IAHnB,mBAGPK,EAHO,KAGDC,EAHC,OAIoBN,mBAAS,IAJ7B,mBAIPO,EAJO,KAIIC,EAJJ,KAiCb,OA5BDC,qBAAU,WACLR,EAGHA,EAAOS,GAAG,uBAAuB,SAAAC,GAChCH,GAAa,SAAAI,GAKZ,OAJAA,EAAMC,KAAKF,GACRC,EAAME,OAAS,KACjBF,EAAMG,QAEA,YAAIH,SARbV,EAAUc,SAYT,CAACf,IAeH,yBAAKgB,UAAU,OACd,4BAAKV,EAAUW,KAAI,SAACP,EAAKQ,GACxB,OAAO,wBAAIC,IAAKD,GAAQR,EAAIN,KAArB,IAA4BM,EAAIU,GAAhC,MAAuCV,EAAIR,aAEnD,0BAAMmB,OAAO,IACZ,2BACCC,MAAO,CAACC,MAAO,OACfC,YAAY,YACZC,aAAa,MACbC,MAAOtB,EACPuB,SAvBqB,SAAAC,GACxBvB,EAAQuB,EAAMC,OAAOH,UAyBnB,2BACCJ,MAAO,CAACC,MAAO,OACfC,YAAY,UACZC,aAAa,MACbC,MAAOxB,EACPyB,SA5BoB,SAAAC,GACvBzB,EAAWyB,EAAMC,OAAOH,UA6BtB,4BAAQI,QA3Ba,SAAAF,GAIvB,OAHAA,EAAMG,iBACN/B,EAAOgC,KAAK,sBAAuB,CAAC5B,KAAMA,GAAQ,YAAaF,YAC/DC,EAAW,KACJ,IAuBL,WC/CgB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6ae19afe.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport io from 'socket.io-client';\n\n\nfunction App() {\n\tconst [socket, setSocket] = useState(null)\n\tconst [message, setMessage] = useState(\"\");\n\tconst [user, setUser] = useState(\"\");\n\tconst [chatChain, setChatChain] = useState([]);\n\tuseEffect(() => {\n\t\tif(!socket) {\n\t\t\tsetSocket(io());\n\t\t} else {\n\t\t\tsocket.on('chat-message-update', msg => {\n\t\t\t\tsetChatChain(chain => {\n\t\t\t\t\tchain.push(msg);\n\t\t\t\t\tif(chain.length > 100) {\n\t\t\t\t\t\tchain.shift();\n\t\t\t\t\t}\n\t\t\t\t\treturn [...chain];\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [socket]);\n\n\tconst handleUserChange = event => {\n\t\tsetUser(event.target.value);\n\t}\n\tconst handleMsgChange = event => {\n\t\tsetMessage(event.target.value);\n\t}\n\tconst handleMsgSubmit = event => {\n\t\tevent.preventDefault();\n\t\tsocket.emit('chat-message-submit', {user: user || \"Anomynous\", message});\n\t\tsetMessage(\"\");\n\t\treturn false;\n\t}\n  return (\n\t\t<div className=\"App\">\n\t\t\t<ul>{chatChain.map((msg, index) => {\n\t\t\t\treturn <li key={index}>{msg.user}[{msg.ip}]: {msg.message}</li>\n\t\t\t})}</ul>\n\t\t\t<form action=\"\">\n\t\t\t\t<input \n\t\t\t\t\tstyle={{width: '15%'}}\n\t\t\t\t\tplaceholder=\"Anonymous\"\n\t\t\t\t\tautoComplete=\"off\" \n\t\t\t\t\tvalue={user} \n\t\t\t\t\tonChange={handleUserChange}\n\t\t\t\t/>\n\n\t\t\t\t<input \n\t\t\t\t\tstyle={{width: '75%'}}\n\t\t\t\t\tplaceholder=\"Message\"\n\t\t\t\t\tautoComplete=\"off\" \n\t\t\t\t\tvalue={message} \n\t\t\t\t\tonChange={handleMsgChange}\n\t\t\t\t/>\n\t\t\t\t<button onClick={handleMsgSubmit}>Send</button>\n\t\t\t</form>\n\t\t</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}